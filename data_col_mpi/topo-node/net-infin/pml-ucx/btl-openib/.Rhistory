dotR <- file.path(Sys.getenv("HOME"), ".R")
if (!file.exists(dotR)) dir.create(dotR)
M <- file.path(dotR, "Makevars")
if (!file.exists(M)) file.create(M)
cat("\nCXX14FLAGS=-O3 -march=native -mtune=native -fPIC",
"CXX14=g++", # or clang++ but you may need a version postfix
file = M, sep = "\n", append = TRUE)
remove.packages("rstan")
if (file.exists(".RData")) file.remove(".RData")
Sys.setenv(DOWNLOAD_STATIC_LIBV8 = 1) # only necessary for Linux without the nodejs library / headers
install.packages("rstan", repos = "https://cloud.r-project.org/", dependencies = TRUE)
example(stan_model, package = "rstan", run.dontrun = TRUE)
install.packages('rstanarm')
library(rstan)
library(rstanarm)
data(wells)
wells$dist100 <- wells$dist / 100
t_prior <- student_t(df = 7, location = 0, scale = 2.5)
fit1 <- stan_glm(switch ~ dist100, data = wells,
family = binomial(link = "logit"),
prior = t_prior, prior_intercept = t_prior,
seed = 12345)
print(fit1)
library(learnbayes)
install.packages('LearnBayes')
curve(dunif(x,0,100),from=0, to =100)
curve(dnorm(x,0.8,2),from=-5, to 6,add=T)
curve(dnorm(x,0.8,2),from=-5, to=6, add=T)
curve(dnorm(x,0.8,2),from=-5, to=6)
curve(dunif(x,0,100),from=0, to =100,add=T)
curve(dgamma(x,1,1))
curve(dbeta(x,5,2))
curve(dgamma(x,1,1))
curve(dgamma(x, 1, 1))
curve(dnorm(x, 0.8, 2), from = -5, to = 6)
curve(dunif(x, 0, 100), from = 0, to = 100)
curve(dbeta(x, 5, 2))
help('lm')
setwd("~/Pubblici/learn-git/ring/ring-light-run")
setwd("~/Pubblici/learn-git/ring/ring-light-run")
mat <- array(data = 0, dim = c(96,4))
colnames(mat) <- c('node','numproc','exec-time','init-time')
row <- 1
for (i in 1:4){
for (j in 1:24){
num <- i*j
tab <- read.csv(paste("ring-node-",i,"-core-",num,"/summary.csv", sep = ''))
mat[row, 1] <- i
mat[row, 2] <- num
mat[row, 3] <- mean(tab[,2])
mat[row, 4] <- mean(tab[,3])
row <- row + 1
}
}
setwd("~/Pubblici/learn-git/ring/ring-light-run")
mat <- array(data = 0, dim = c(96,4))
colnames(mat) <- c('node','numproc','exec-time','init-time')
row <- 1
for (i in 1:4){
for (j in 1:24){
num <- i*j
tab <- read.csv(paste("ring-node-",i,"-core-",num,"/summary.csv", sep = ''))
mat[row, 1] <- i
mat[row, 2] <- num
mat[row, 3] <- mean(tab[,2])
mat[row, 4] <- mean(tab[,3])
row <- row + 1
}
}
setwd("~/Pubblici/learn-git/ring/ring-light-run/")
mat <- array(data = 0, dim = c(96,4))
colnames(mat) <- c('node','numproc','exec-time','init-time')
row <- 1
for (i in 1:4){
for (j in 1:24){
num <- i*j
tab <- read.csv(paste("ring-node-",i,"-core-",num,"/summary.csv", sep = ''))
mat[row, 1] <- i
mat[row, 2] <- num
mat[row, 3] <- mean(tab[,2])
mat[row, 4] <- mean(tab[,3])
row <- row + 1
}
}
setwd("~/Pubblici/learn-git/ring/ring-light-run")
mat <- array(data = 0, dim = c(96,4))
colnames(mat) <- c('node','numproc','exec-time','init-time')
row <- 1
for (i in 1:4){
for (j in 1:24){
num <- i*j
tab <- read.csv(paste("ring-node-",i,"-core-",num,"/summary.csv", sep = ''))
mat[row, 1] <- i
mat[row, 2] <- num
mat[row, 3] <- mean(tab[,2])
mat[row, 4] <- mean(tab[,3])
row <- row + 1
}
}
setwd("~/Pubblici/learn-git/ring/ring-light-run")
mat <- array(data = 0, dim = c(96,4))
colnames(mat) <- c('node','numproc','exec-time','init-time')
row <- 1
for (i in 1:4){
for (j in 1:24){
num <- i*j
tab <- read.csv(paste("./ring-node-",i,"-core-",num,"/summary.csv", sep = ''))
mat[row, 1] <- i
mat[row, 2] <- num
mat[row, 3] <- mean(tab[,2])
mat[row, 4] <- mean(tab[,3])
row <- row + 1
}
}
View(tab)
View(mat)
setwd("~/Pubblici/learn-git/ring/ring-light-run")
mat <- array(data = 0, dim = c(96,4))
colnames(mat) <- c('node','numproc','exec-time','init-time')
row <- 1
for (i in 1:4){
for (j in 1:24){
num <- i*j
tab <- read.csv(paste("./ring-node-",i,"-core-",num,"/summary.csv", sep = ''))
mat[row, 1] <- i
mat[row, 2] <- num
mat[row, 3] <- mean(tab[,2])
mat[row, 4] <- mean(tab[,3])
row <- row + 1
}
}
mat <- data.frame(mat)
mat$node <- as.factor(mat$node)
summary(mat)
library(ggplot2)
block_start <- 1 + 24 * 0
block_end <- 24 * 4
ggplot(data = mat[block_start:block_end,],mapping = aes(x = numproc, y = exec.time, color = node)) +
#geom_line()+
#ylim(0,2.5e-04)+
#xlim(0,24)+
geom_point()
library(ggplot2)
block_start <- 1 + 24 * 0
block_end <- 24 * 1
ggplot(data = mat[block_start:block_end,],mapping = aes(x = numproc, y = exec.time, color = node)) +
#geom_line()+
#ylim(0,2.5e-04)+
#xlim(0,24)+
geom_point()
library(ggplot2)
block_start <- 1 + 24 * 0
block_end <- 24 * 2
ggplot(data = mat[block_start:block_end,],mapping = aes(x = numproc, y = exec.time, color = node)) +
#geom_line()+
#ylim(0,2.5e-04)+
#xlim(0,24)+
geom_point()
library(ggplot2)
block_start <- 1 + 24 * 1
block_end <- 24 * 3
ggplot(data = mat[block_start:block_end,],mapping = aes(x = numproc, y = exec.time, color = node)) +
#geom_line()+
#ylim(0,2.5e-04)+
#xlim(0,24)+
geom_point()
library(ggplot2)
block_start <- 1 + 24 * 1
block_end <- 24 * 4
ggplot(data = mat[block_start:block_end,],mapping = aes(x = numproc, y = exec.time, color = node)) +
#geom_line()+
#ylim(0,2.5e-04)+
#xlim(0,24)+
geom_point()
library(ggplot2)
block_start <- 1 + 24 * 0
block_end <- 24 * 4
ggplot(data = mat[block_start:block_end,],mapping = aes(x = numproc, y = exec.time, color = node)) +
#geom_line()+
#ylim(0,2.5e-04)+
#xlim(0,24)+
geom_point()
library(ggplot2)
block_start <- 1 + 24 * 0
block_end <- 24 * 4
ggplot(data = mat[block_start:block_end,],mapping = aes(x = numproc, y = exec.time, color = node)) +
geom_line()+
geom_point()
library(ggplot2)
ggplot(data = mat.add) +
geom_boxplot(mapping = aes(x = decom, y = pre.send ))
setwd("~/Pubblici/learn-git/ring/ring-light-run")
mat <- array(data = 0, dim = c(96,4))
colnames(mat) <- c('node','numproc','exec-time','init-time')
row <- 1
for (i in 1:4){
for (j in 1:24){
num <- i*j
tab <- read.csv(paste("./ring-node-",i,"-core-",num,"/summary.csv", sep = ''))
mat[row, 1] <- i
mat[row, 2] <- num
mat[row, 3] <- mean(tab[,2])
mat[row, 4] <- mean(tab[,3])
row <- row + 1
}
}
mat <- data.frame(mat)
mat$node <- as.factor(mat$node)
library(ggplot2)
block_start <- 1 + 24 * 0
block_end <- 24 * 4
ggplot(data = mat[block_start:block_end,],mapping = aes(x = numproc, y = exec.time, color = node)) +
geom_line()+
geom_point()
D_vec <- array(data = 0, dim = c(16,3))
D2_vec <- array(data = 0, dim = c(6,3))
D3_vec <- array(data = 0, dim = c(9,3))
# 1D decomposition
D_vec[1,1]=24
D_vec[1,2]=1
D_vec[1,3]=1
# 2D decomposition
D_vec[2,1]=12
D_vec[2,2]=2
D_vec[2,3]=1
D_vec[3,1]=2
D_vec[3,2]=12
D_vec[3,3]=1
D_vec[4,1]=6
D_vec[4,2]=4
D_vec[4,3]=1
D_vec[5,1]=4
D_vec[5,2]=6
D_vec[5,3]=1
D_vec[6,1]=3
D_vec[6,2]=8
D_vec[6,3]=1
D_vec[7,1]=8
D_vec[7,2]=3
D_vec[7,3]=1
# 3D decomposition
D_vec[8,1]=2
D_vec[8,2]=2
D_vec[8,3]=6
D_vec[9,1]=2
D_vec[9,2]=6
D_vec[9,3]=2
D_vec[10,1]=6
D_vec[10,2]=2
D_vec[10,3]=2
D_vec[11,1]=4
D_vec[11,2]=2
D_vec[11,3]=3
D_vec[12,1]=4
D_vec[12,2]=3
D_vec[12,3]=2
D_vec[13,1]=2
D_vec[13,2]=4
D_vec[13,3]=3
D_vec[14,1]=2
D_vec[14,2]=3
D_vec[14,3]=4
D_vec[15,1]=3
D_vec[15,2]=4
D_vec[15,3]=2
D_vec[16,1]=3
D_vec[16,2]=2
D_vec[16,3]=4
setwd("~/Pubblici/learn-git/matrix")
mat.add <- array(data = 0, dim = c(170,8))
colnames(mat.add) <- c('decom','topo','matrix',
'pre.send','main.matrix',
'remain.matrix','total.comput','total')
which.row <- 1
topo.row <- 1
while (which.row <= 160){
uno <- D_vec[topo.row,1]
due <- D_vec[topo.row,2]
tre <- D_vec[topo.row,3]
topo.row <- topo.row + 1
folder <- paste('matrix-',uno,'-',due,'-',tre, sep='')
for (i in 0:9){
subfolder <- paste('./',folder,'/matrix-',i,sep='')
tab.add <- read.csv(paste(subfolder,'/summary.csv', sep = ''))
if (tre == 1 && due == 1) {
mat.add[which.row, 1] <- '1D'
} else if (tre == 1 ){
mat.add[which.row, 1] <- '2D'
} else{
mat.add[which.row, 1] <- '3D'
}
if (i == 0){mat.add[which.row, 3] <- '2400x100x100'}
else if (i == 1){ mat.add[which.row, 3] <- '1200x200x100'}
else if (i== 2) { mat.add[which.row, 3] <- '800x300x100' }
else if (i== 3) { mat.add[which.row, 3] <- '100x100x2400'}
else if (i== 4) { mat.add[which.row, 3] <- '100x200x1200'}
else if (i== 5) { mat.add[which.row, 3] <- '100x300x800' }
else if (i== 6) { mat.add[which.row, 3] <- '300x400x200'}
else if (i== 7) { mat.add[which.row, 3] <- '200x1200x100'}
else if (i== 8) { mat.add[which.row, 3] <- '100x100x2400' }
else if (i== 9) { mat.add[which.row, 3] <- '100x1200x200' }
mat.add[which.row, 2] <- folder
mat.add[which.row, 4] <- mean(tab.add[,1])
mat.add[which.row, 5] <- mean(tab.add[,2])
mat.add[which.row, 6] <- mean(tab.add[,3])
mat.add[which.row, 7] <- mean(tab.add[,4])
mat.add[which.row, 8] <- mean(tab.add[,5])
which.row <- which.row + 1
}
}
folder <- 'matrix-check'
for (i in 0:9){
subfolder <- paste('./',folder,'/matrix-',i,sep='')
tab.add <- read.csv(paste(subfolder,'/summary.csv', sep = ''))
mat.add[which.row, 1] <- 'check'
if (i == 0){mat.add[which.row, 3] <- '2400x100x100'}
else if (i == 1){ mat.add[which.row, 3] <- '1200x200x100'}
else if (i== 2) { mat.add[which.row, 3] <- '800x300x100' }
else if (i== 3) { mat.add[which.row, 3] <- '100x100x2400'}
else if (i== 4) { mat.add[which.row, 3] <- '100x200x1200'}
else if (i== 5) { mat.add[which.row, 3] <- '100x300x800' }
else if (i== 6) { mat.add[which.row, 3] <- '300x400x200'}
else if (i== 7) { mat.add[which.row, 3] <- '200x1200x100'}
else if (i== 8) { mat.add[which.row, 3] <- '100x100x2400' }
else if (i== 9) { mat.add[which.row, 3] <- '100x1200x200' }
mat.add[which.row, 2] <- 'matrix-24-1-1'
mat.add[which.row, 4] <- mean(tab.add[,1])
mat.add[which.row, 5] <- mean(tab.add[,2])
mat.add[which.row, 6] <- 0
mat.add[which.row, 7] <- mean(tab.add[,2])
mat.add[which.row, 8] <- mean(tab.add[,3])
which.row <- which.row + 1
}
mat.add <- data.frame(mat.add)
mat.add$pre.send <- as.numeric(mat.add$pre.send)
mat.add$main.matrix <- as.numeric(mat.add$main.matrix)
mat.add$remain.matrix <- as.numeric(mat.add$remain.matrix)
mat.add$total.comput <- as.numeric(mat.add$total.comput)
mat.add$total <- as.numeric(mat.add$total)
summary(mat.add)
library(ggplot2)
ggplot(data = mat.add) +
geom_boxplot(mapping = aes(x = decom, y = pre.send , color = matrix))
ggplot(data = mat.add)+
geom_boxplot(mapping = aes(x = decom, y = remain.matrix , color = matrix))
ggplot(data = mat.add)+
geom_boxplot(mapping = aes(x = decom, y = total.comput , color = matrix))
ggplot(data = mat.add)+
geom_boxplot(mapping = aes(x = decom, y = total , color = matrix))
library(ggplot2)
ggplot(data = mat.add) +
geom_boxplot(mapping = aes(x = decom, y = pre.send ))
ggplot(data = mat.add)+
geom_boxplot(mapping = aes(x = decom, y = main.matrix ))
ggplot(data = mat.add)+
geom_boxplot(mapping = aes(x = decom, y = remain.matrix ))
ggplot(data = mat.add)+
geom_boxplot(mapping = aes(x = decom, y = total.comput ))
ggplot(data = mat.add)+
geom_boxplot(mapping = aes(x = decom, y = total ))
}
}
library(plotrix)
topol <- c('core', 'socket', 'node')
net <- c('gig', 'infin')
pml <- c('ob1', 'ucx')
btl <- c('vader','tcp' ,'openib')
howmany <- 100
iter <- howmany -1
for  ( to in topol ){
for (ne in net ){
for (pm in pml ){
for (bt in btl ){
if (((pm=='ob1')&&(bt=='openib'))||
((to=='node')&&(pm=='ob1')&&(bt=='vader'))){ next
}else{
setwd(paste("~/Pubblici/learn-git/data_col_mpi/topo-",
to,"/net-",ne,"/pml-",pm,"/btl-",bt,sep=''))
mat <- array(data = 0, dim = c(howmany,30,2))
y.dat <- c()
x.dat <- c()
z.dat <- c()
for (y in 0:iter){
tab <- read.csv(paste('results-',y,'.csv', sep = ''))
mat[y+1,,1] <- tab[,3]
mat[y+1,,2] <- tab[,4]
y.dat <- c(y.dat, tab[,3])
x.dat <- c(x.dat, tab[,1])
z.dat <- c(z.dat, tab[,4])
}
modello <- nls(y.dat~ a + x.dat/b, start = list (a=2, b = 12000))
latency <- coef(modello)[1]
bandwidth <- coef(modello)[2]
mat.mean <- matrix(data = 0, nrow = 30, ncol = 2)
mat.var <- matrix(data = 0, nrow = 30, ncol = 2)
for (y in 1:30){
mat.mean[y,1] <- mean(mat[,y,1])
mat.mean[y,2] <- mean(mat[,y,2])
mat.var[y,1] <- var(mat[,y,1])
mat.var[y,2] <- var(mat[,y,2])
tab[y,5] <- latency + tab[y,1]/bandwidth
tab[y,6] <- tab[y,1]/tab[y,5]
}
tab[,3] <- mat.mean[,1]
tab[,4] <- mat.mean[,2]
write.csv2(round(tab,digits = 2),
file = paste('~/Pubblici/learn-git/data_col_mpi/summary--topo-',to,
"--net-",ne,
"--pml-",pm,
"--btl-",bt,'.csv',sep=''),
quote = FALSE ,row.names = FALSE)
}
}
}
}
exit
quit
}
library(plotrix)
topol <- c('core', 'socket', 'node')
net <- c('gig', 'infin')
pml <- c('ob1', 'ucx')
btl <- c('vader','tcp' ,'openib')
howmany <- 100
iter <- howmany -1
for  ( to in topol ){
for (ne in net ){
for (pm in pml ){
for (bt in btl ){
if (((pm=='ob1')&&(bt=='openib'))||
((to=='node')&&(pm=='ob1')&&(bt=='vader'))){ next
}else{
setwd(paste("~/Pubblici/learn-git/data_col_mpi/topo-",
to,"/net-",ne,"/pml-",pm,"/btl-",bt,sep=''))
mat <- array(data = 0, dim = c(howmany,30,2))
y.dat <- c()
x.dat <- c()
z.dat <- c()
for (y in 0:iter){
tab <- read.csv(paste('results-',y,'.csv', sep = ''))
mat[y+1,,1] <- tab[,3]
mat[y+1,,2] <- tab[,4]
y.dat <- c(y.dat, tab[,3])
x.dat <- c(x.dat, tab[,1])
z.dat <- c(z.dat, tab[,4])
}
modello <- nls(y.dat~ a + x.dat/b, start = list (a=2, b = 12000))
latency <- coef(modello)[1]
bandwidth <- coef(modello)[2]
mat.mean <- matrix(data = 0, nrow = 30, ncol = 2)
mat.var <- matrix(data = 0, nrow = 30, ncol = 2)
for (y in 1:30){
mat.mean[y,1] <- mean(mat[,y,1])
mat.mean[y,2] <- mean(mat[,y,2])
mat.var[y,1] <- var(mat[,y,1])
mat.var[y,2] <- var(mat[,y,2])
tab[y,5] <- latency + tab[y,1]/bandwidth
tab[y,6] <- tab[y,1]/tab[y,5]
}
tab[,3] <- mat.mean[,1]
tab[,4] <- mat.mean[,2]
write.csv2(round(tab,digits = 2),
file = paste('~/Pubblici/learn-git/data_col_mpi/summary--topo-',to,
"--net-",ne,
"--pml-",pm,
"--btl-",bt,'.csv',sep=''),
quote = FALSE ,row.names = FALSE)
}
}
}
}
}
